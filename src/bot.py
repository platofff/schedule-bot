import asyncio
import re
from pathlib import Path
import os
import shelve
from datetime import date
from typing import Iterable, Any

from cache import AsyncTTL
from vkbottle.http import aiohttp

from src.abstract import AbstractBotAPI
from src.misc import async_partial


class Bot:
    _weekdays = {1: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                 2: '–≤—Ç–æ—Ä–Ω–∏–∫',
                 3: '—Å—Ä–µ–¥—É',
                 4: '—á–µ—Ç–≤–µ—Ä–≥',
                 5: '–ø—è—Ç–Ω–∏—Ü—É',
                 6: '—Å—É–±–±–æ—Ç—É'}

    def __init__(self, apis: Iterable[AbstractBotAPI]):
        Path('db').mkdir(exist_ok=True)
        self._db = shelve.open(os.path.join('db', 'db'), writeback=True)
        asyncio.get_event_loop().create_task(self._get_class_intervals())
        for api in apis:
            api.add_text_handler(async_partial(self._handler, api))

    def __del__(self):
        self._db.close()

    async def _get_class_intervals(self):
        self._class_intervals = await self._schedule_api_rq('class-intervals')

    @AsyncTTL(time_to_live=60, maxsize=4096)
    async def _schedule_api_rq(self, call: str) -> dict:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://schedule.npi-tu.ru/api/v1/{call}') as resp:
                res = await resp.json(content_type=None)
        if call.endswith('schedule'):
            for i in range(len(res['classes'])):
                res['classes'][i]['discipline'] = re.sub(' \(.*.\)$', '', res['classes'][i]['discipline'])
        return res

    async def _handler(self, api: AbstractBotAPI, ctx: Any, text: str):
        if text == '/start':
            return await api.send_text(ctx, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Æ–†–ì–ü–£ (–ù–ü–ò). '
                                            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'role')
        sid = api.user_id(ctx)
        if sid not in self._db:
            if text == '–°—Ç—É–¥–µ–Ω—Ç':
                self._db[sid] = {'role': 1, 'faculty': None, 'year': None, 'group': None}
                return await api.send_text(ctx, '–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', 'clear')
            elif text == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
                self._db[sid] = {'role': 0, 'name': None}
                return await api.send_text(ctx, '–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–≤–∞–Ω–æ–≤ –ò –ò".', 'clear')
            else:
                return await api.send_text(ctx, '–í–≤–µ–¥–∏—Ç–µ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–°—Ç—É–¥–µ–Ω—Ç"!', 'role')
        if self._db[sid]['role'] == 1:
            if self._db[sid]['faculty'] is None:
                faculty = text.upper()
                faculties = await self._schedule_api_rq('faculties')
                faculty_id = None
                for id_, data in faculties.items():
                    if data['code'] == faculty:
                        faculty_id = id_
                        break
                if faculty_id is None:
                    return await api.send_text(ctx, '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n- ' +
                                               '\n- '.join([f['code'] for f in faculties.values()]))
                self._db[sid]['faculty'] = faculty_id
                return await api.send_text(ctx, '–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—è (1-6)?')
            if self._db[sid]['year'] is None:
                try:
                    year = int(text)
                    assert 1 <= year <= 6
                except (ValueError, AssertionError):
                    return await api.send_text(ctx, '–ù–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 6!')
                self._db[sid]['year'] = year
                groups = await self._schedule_api_rq(
                    f'faculties/{self._db[sid]["faculty"]}/years/{self._db[sid]["year"]}/groups')
                return await api.send_text(ctx, '–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n- ' + '\n- '.join([x[0] for x in groups]))

            if self._db[sid]['group'] is None:
                groups = [x[0] for x in await self._schedule_api_rq(f'faculties/{self._db[sid]["faculty"]}/years/{self._db[sid]["year"]}/groups')]
                if text not in groups:
                    return await api.send_text('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n- ' + '\n- '.join(groups))
                self._db[sid]['group'] = text
                return await api.send_text(ctx, '–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.', 'set')
            schedule = await self._schedule_api_rq(
                f'faculties/{self._db[sid]["faculty"]}/years/{self._db[sid]["year"]}/groups/{self._db[sid]["group"]}/schedule')
        else:
            if self._db[sid]['name'] is None:
                res = await self._schedule_api_rq(f'lecturers/{text}')
                if len(res) == 1:
                    self._db[sid]['name'] = res[0]
                    return await api.send_text(ctx, '–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.', 'set')
                else:
                    return await api.send_text(ctx, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            schedule = await self._schedule_api_rq(f'lecturers/{self._db[sid]["name"]}/schedule')

        for class_ in schedule['classes']:
            if 'lecturer' not in class_.keys():
                class_.update({'lecturer': ''})
            else:
                class_["lecturer"] = '\n' + class_["lecturer"].strip()

        if text == '–ü–∞—Ä–∞':
            now = ''
            next_ = ''
            if 'class' not in schedule['now']:
                return await api.send_text(ctx, '–ü–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å üòº')
            for class_ in sorted(schedule['classes'], key=lambda x: x['class']):
                if class_['week'] == schedule['now']['week'] and class_['day'] == schedule['now']['day']:
                    interval = self._class_intervals[str(class_["class"])]
                    if class_['class'] == schedule['now']['class']:
                        now = f'üü¢ {interval["start"]}‚Äì{interval["end"]} {api.bold_text(class_["auditorium"])}\n' \
                              f'{class_["discipline"]}{class_["lecturer"]}'
                    elif class_['class'] > schedule['now']['class']:
                        next_ = f'\n\nüîµ {interval["start"]}‚Äì{interval["end"]} {api.bold_text(class_["auditorium"])}\n' \
                                f'{class_["discipline"]}{class_["lecturer"]}'
                        break
            if now == '' and next_ == '':
                return await api.send_text(ctx, '–ü–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å üòº')
            return await api.send_text(ctx, now + next_)

        async def get_classes(day, all_next=False) -> str:
            dayn = []
            for class_ in schedule['classes']:
                if class_['week'] == schedule['now']['week'] and class_['day'] == day:
                    interval = self._class_intervals[str(class_["class"])]
                    if all_next:
                        state = 'üîµ'
                    elif 'class' not in schedule['now']:
                        state = '‚ö™'
                    elif class_['class'] < schedule['now']['class']:
                        state = '‚ö™'
                    elif class_['class'] == schedule['now']['class']:
                        state = 'üü¢'
                    else:
                        state = 'üîµ'
                    dayn.append((class_['class'],
                                 f'{state} {interval["start"]}‚Äì{interval["end"]} {api.bold_text(class_["auditorium"])}\n'
                                 f'{class_["discipline"]}{class_["lecturer"]}'))
            return '\n\n'.join([x[1] for x in sorted(dayn, key=lambda x: x[0])])

        active_days = list(sorted(set([c['day'] for c in schedule['classes']])))
        today = None
        tomorrow = None
        not_today = False
        isoweekday = date.today().isoweekday()
        for day in active_days:
            if day >= schedule['now']['day']:
                if today is None:
                    today = day
                    continue
                tomorrow = day
                break
        if tomorrow is None:
            tomorrow = active_days[0]

        if today != isoweekday:
            not_today = True
            tomorrow = today

        if text == '–ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è':
            if not_today:
                await api.send_text(ctx, f'–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç! üòº –í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {self._weekdays[today]}:')
            res = await get_classes(today)
            if res != '':
                return await api.send_text(ctx, res)
            return await api.send_text('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç!')

        if text == '–ü–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞':
            while True:
                res = await get_classes(tomorrow, True)
                if res == '':
                    try:
                        tomorrow = active_days[active_days.index(tomorrow) + 1]
                    except IndexError:
                        tomorrow = active_days[0]
                        break
                else:
                    break
            if tomorrow != isoweekday + 1:
                await api.send_text(ctx, f'–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç! üòº –í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {self._weekdays[tomorrow]}:')
            return await api.send_text(ctx, res)

        if text == '–°–±—Ä–æ—Å':
            del self._db[sid]
            await api.send_text(ctx, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–°—Ç—É–¥–µ–Ω—Ç"', 'role')
